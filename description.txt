1. Установите файлы из каталога levels на любой доступный вам веб-сервер.
2. Запустите главное окно, например http://localhost:4000/levels/level0.html

Идея демонстрационного приложения исследовать организацию обмена сообщениями
между родительскими и дочерними окнами на разных уровнях. Изучите как работает приложение.

Разрешите всплывающие окна для этого сайта.
"Авторизация" возможна из любого окна, для этого кликните на авторизационных данных пользователя
и откроется окно авторизации, в котором вводятся имя и роль пользователя.
При этом, авторизационные данные всплывают сообщением 'logged-in' до верхнего родительского окна,
затем спускаются вниз на все дочерние сообщением 'user-auth', и происходит обновление данных пользователя. 
Если пользователь другой (новое имя), то все окна закрываются, кроме главного.

При открытии дочернего окна, оно запрашивает авторизационные данные у родителя сообщением 'ask-user',
родитель отвечает ему сообщение 'asked-user', в которое прикладывает запрашиваемые данные.

В главном окне верхнего уровня имеются два блока селекторов. 

Верхний блок радио-кнопок служит для выбора "конфигурации",
которая будет открыта в дочернем окне следующего уровня при нажатии кнопки "Открыть". 
В свою очередь, открывшееся дочернее окно служит для выбора "документа",
который будет открыт под указанной конфигурацией в дочернем окне следующего уровня при нажатии кнопки "Открыть". 

Нижний блок чек-боксов служит для выбора конфигураций, потомков которых мы хотели бы сосчитать, либо закрыть.

Каждое окно вызовом CreateService создает свой экземпляр сервиса коммуникаций, передавая ему 
данные о выбранной конфигурации и callback для получения сообщений из экземпляра сервиса.

Изучите исходный код сервиса коммуникаций. В нём намеренно удалено содержание строки 61, 
а в строке 62 переменной accepted присвоено константное значение. Поэтому, приложение подсчитывает все
дочерние окна, не фильтруя потомков только выбранных конфигураций.
Закрытие всех дочерних окон происходит в строке 30 модуля главного окна отправкой сообщения 'must-close'

Задание. 
1. Реализуйте подсчет потомков выбранных конфигураций, используя переменные cfg_mask и cfg (строки 58 и 59),
а также внесите изменения в код модуля главного окна level0.js для вычисления маски запроса cfg_mask (строка 24)
по выбранным конфигурациям (только отмеченным чек-боксам).

2. По аналогии с countDescendants реализуйте новый метод closeDescendants, который закрывал бы только 
потомков выбранных конфигураций. Достаточным будет решение, которое только закрывает окна, лучшее решение будет 
также подсчитывать количество закрытых окон. 